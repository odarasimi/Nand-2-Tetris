// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Not(in=zx, out=notzx);
    // And16(a=notzx, b=x, out=and1out);
    // Not16(in=and1out,out=not2out);
    // Mux16(a=and1out, b=not2out, sel=nx, out=mux1out);

    // Not(in=zy, out=notzy);
    // And16(a=notzy, b=y, out=and2out);
    // Not16(in=and2out, out=not3out);
    // Mux16(a=and2out, b=not3out, sel=ny, out=mux2out);

    // And16(a=f, b=mux1out, out=and3out);
    // And16(a=f, b=mux2out, out=and4out);
    // And16(a=mux1out, b=mux2out, out=and5out);

    // Add16(a=and3out, b=and4out, out=add1out);

    // Not(in=f, out=not4out);

    // And16(a=not4out, b=and5out, out=and6out);

    // Mux16(a=and6out, b=add1out, sel=f, out=mux3out);

    // Not16(in=mux3out, out=not5out);

    // Mux16(a=mux3out, b=not5out, sel=no, out=out, out[15]=ng, out[0..7]=zrLow, out[8..15]=zrHigh);

    // Or8Way(in=zrLow, out=or1out);
    // Or8Way(in=zrHigh, out=or2out);

    // Or(a=or1out, b=or2out, out=or3out);

    // Not(in=or3out, out=zr);

    // ZX and ZY flag handling
    Mux16(a=x, b[0..15]=false, sel=zx, out=xMux);
    Mux16(a=y, b[0..15]=false, sel=zy, out=yMux);

    // NX and NY flag handling
    Not16(in=xMux, out=notX);
    Mux16(a=xMux, b=notX, sel=nx, out=readyX);
    Not16(in=yMux, out=notY);
    Mux16(a=yMux, b=notY, sel=ny, out=readyY);

    // f control bit handling
    And16(a=readyX, b=readyY, out=andOut);
    Add16(a=readyX, b=readyY, out=addOut);
    Mux16(a=andOut, b=addOut, sel=f, out=fOut);

    // NO flag handling
    Not16(in=fOut, out=fNotOut);
    Mux16(a=fOut, b=fNotOut, sel=no, out=out, out[15]=ng, out[0..7]=zrLow, out[8..15]=zrHigh);

    //ZR flag handling
    Or8Way(in=zrLow, out=or1Out);
    Or8Way(in=zrHigh, out=or2Out);
    Or(a=or1Out, b=or2Out, out=or3Out);
    Not(in=or3Out, out=zr);
}